
@model Vizi.Models.RestaurantReviewViewModel

@{
    ViewBag.Title = "Details about " + Model.CurrentRestaurant.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

<div class="container-fluid">
    <div class="carousel slide" data-ride="carousel" id="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carousel" data-slide to="0" class="active"></li>
            <li data-target="#carousel" data-slide to="1"></li>
            <li data-target="#carousel" data-slide to="2"></li>
        </ol>
        <div class="carousel-inner">
            <div class="item active">
                <img src="@Url.Action("getSlider", "Restaurants", new { id = Model.CurrentRestaurant.Id })">
            </div>
            <div class="item">
                <img src="@Url.Action("getSlider2", "Restaurants", new { id = Model.CurrentRestaurant.Id })">
            </div>
            <div class="item">
                <img src="@Url.Action("getSlider3", "Restaurants", new { id = Model.CurrentRestaurant.Id })">
            </div>
            <div class="item">
                <img src="@Url.Action("getSlider4", "Restaurants", new { id = Model.CurrentRestaurant.Id })">
            </div>
        </div>
        <a class="carousel-control left" href="#carousel" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left"></span>
        </a>
        <a class="carousel-control right" href="#carousel" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right"></span>
        </a>
    </div>
</div>

<div id="wrapper" class="row" style=" width:100%; background-position: center; background-repeat: no-repeat">

    <div style="padding-left:6%;">
        <ul style="list-style:none;">
            <li>
                <span class="glyphicon glyphicon-cutlery"></span>
                <i style="font-size:16px">    Name: @Model.CurrentRestaurant.Name</></i> 
            </li>
            <li>
                <span class="glyphicon glyphicon-envelope"></span>
                <i style="font-size:16px">  Email: @Model.CurrentRestaurant.Email</i>
            </li>
            <li>
                <span class="glyphicon glyphicon-map-marker"></span>
                <i style="font-size:16px">    Address: @Model.CurrentRestaurant.Address</i>
            </li>
            <li>
                <span class="glyphicon glyphicon-phone"></span>
                <i style="font-size:16px">  Telephone: @Model.CurrentRestaurant.Telephone</i>
            </li>
        </ul>
    </div>
    <hr />
    <div class="rating form-group col-lg-6" style="padding-left:8%; color:darkorange; font-size:16px">
        @{
            if (Model.ListOfRatings.Count > 0)
            {
                var max = 0;
                foreach (var r in Model.ListOfRatings)
                {
                    max += r.rating;
                }
                var avg = max / Model.ListOfRatings.Count;
                <p ><i>Average rating:</i></p>
                <p>@avg/5 from @Model.ListOfRatings.Count rating(s)</p>
            }
            else
            {
                <p><i>There are no ratings for this restaurant</i></p>
            }
        }
        @{
            var ratedYet = false;
            foreach (var r in Model.ListOfRatings)
            {
                if (r.UserId == Model.CurrentUserId)
                {
                    ratedYet = true;
                }
            }
            <div class="rating_part">
                @if (!ratedYet)
                {
                    <p><i>Rate this restaurant</i></p>
                    <img src="~/static_images/rating_blank.png" id="1" width="25" height="25" /><img src="~/static_images/rating_blank.png" id="2" width="25" height="25" /><img src="~/static_images/rating_blank.png" id="3" width="25" height="25" /><img src="~/static_images/rating_blank.png" id="4" width="25" height="25" /><img src="~/static_images/rating_blank.png" id="5" width="25" height="25" />
                }
                else
                {
                    <p>You have already rated this restaurant</p>
                }
            </div>
        }
    </div>
</div>



<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Deleting review!</h4>
            </div>
            <div class="modal-body">Are you sure you want to delete this review?</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                <button type="button" id="confirm" name="" class="btn btn-primary" data-dismiss="modal">Yes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="bookThis" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Book a table in @Model.CurrentRestaurant.Name!</h4>
            </div>
            <div class="modal-body" id="modal-email">
                <div class="telephone">
                    Telephone Number: <input type="text" id="email_phoneNumber" class="form-control" required />
                </div>
                <div class="people">
                    How Many People? <input type="number" id="email_people" class="form-control" required />
                </div>
                <div class="hour">
                    Book from hour: <select class="form-control" id="email_hour">
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                <button type="button" id="sendemail" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>
</div>
<div class="container">
    <div style="text-align:center " class="row">
        <div class="col-xs-12 col-sm-4"></div>
        <input type="button" name="book" data-toggle="modal" data-target="#bookThis" class="form-control btn-warning col-xs-12 col-sm-4" id="book" value="Book" style="margin-top: 50px;" />
        <div class="col-xs-12 col-sm-4"></div>
    </div>
</div>
<br />


<hr class="hr" />


<div id="reviews">
    @{
        foreach (var r in Model.ListOfReviews)
        {
    <div id="@r.Id" class="form-group box">
       
            <p><b>@Html.Action("getUsername", "Reviews", new { userId = r.UserId })</b></p>
            <span>
                @r.Body
            </span>
            <p>
                <i style="font-size: smaller;">@r.Timestamp</i>

                @if (r.UserId == Model.CurrentUserId)
                {
                    <input type="button" name="@r.Id" value="Delete" data-target="#myModal" data-toggle="modal" class="removable btn btn-danger" />
                }
            </p>
      
    </div>
        }
    }

</div>
<br />
<div style="text-align:center; margin: 30px;" class="row col-lg-12">
    <div id="review_add">
        Add a review:
        <input type="text" name="review" id="review" class="form-control" style="display: inline" />
        <input type="submit" name="Submit" value="Submit" id="addReview" class="btn btn-default" />
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        window.onload = () => {

            let hours = document.getElementById("email_hour");
            for (let h = 0; h < 25; h++) {
                let option = document.createElement("option");
                let optionTime = document.createTextNode(h + ":00");
                option.appendChild(optionTime);
                hours.appendChild(option);
            }
        let sendEmail = document.getElementById("sendemail");
        let destination = document.getElementById("reviews");
        deleteButtons(document.getElementsByClassName("removable"));
        let reviewBody = document.getElementById("review");
        let send = document.getElementById("addReview");
        send.addEventListener("click", () => {
            if (reviewBody.value !== "") {
                let warning = document.getElementsByClassName("rev_warning")[0];
                if (warning) {
                    destination.removeChild(warning);
                }
                fetch("/Reviews/AjaxReview?RestaurantId=@Model.CurrentRestaurant.Id", {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Body: reviewBody.value })
                }).then(data => data.json()).then(function (data) {
                    let wrap = document.createElement("div");
                    wrap.setAttribute("id", data["Id"]);
                    wrap.setAttribute("class", "form-group box");
                    //wrap.setAttribute("style", "margin-left:7%");
                    let username = document.createElement("p");
                    let userIdj = data["UserId"];
                    fetch("/Reviews/getUsername/", {
                        method: "POST",
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ userId: userIdj })
                    }).then(o => o.text()).then(function (data) {
                        let bUsername = document.createElement("b");
                        let bText = document.createTextNode(data);
                        bUsername.appendChild(bText);
                        username.appendChild(bUsername);
                    });
                    let italicTimestamp = document.createElement("i");
                    italicTimestamp.setAttribute("style", "font-size: smaller");
                    let italicText = document.createTextNode(data["Timestamp"]);
                    italicTimestamp.appendChild(italicText);
                    let timestamp = document.createElement("p");
                    timestamp.appendChild(italicTimestamp);
                    let body = document.createElement("span");
                    let bodyText = document.createTextNode(data["Body"]);
                    body.appendChild(bodyText);
                    let btn = document.createElement("input");
                    btn.setAttribute("class", "removable btn btn-danger");
                    btn.setAttribute("type", "button");
                    btn.setAttribute("name", data["Id"]);
                    btn.setAttribute("value", "Delete");
                    btn.setAttribute("data-toggle", "modal");
                    btn.setAttribute("data-target", "#myModal");
                    timestamp.appendChild(btn);
                    //let hr = document.createElement("hr");
                    deleteButtons([btn]);
                    wrap.appendChild(username);
                    wrap.appendChild(body);
                    wrap.appendChild(timestamp);
                    //wrap.appendChild(btn);
                    //wrap.appendChild(hr);
                    destination.append(wrap);
                    reviewBody.value = "";
                })
            }
            else {
                let p = document.createElement("p");
                let pText = document.createTextNode("Please type your review before adding.");
                p.appendChild(pText);
                p.setAttribute("class", "rev_warning");
                destination.appendChild(p);
            }
        })
        let images = document.getElementsByClassName("rating")[0].getElementsByTagName("img");
        for (let i = 0; i < images.length; i++) {
            images[i].addEventListener("mouseover", () => {
                for (let s = 0; s <= i; s++) {
                    images[s].src = "../../static_images/rating.png";
                }
                for (let s = i + 1; s < images.length; s++) {
                    images[s].src = "../../static_images/rating_blank.png";
                }
            })
            images[i].addEventListener("click", () => {
                let rat = images[i].getAttribute("id");
                    fetch("/Ratings/addRating/", {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ rating: rat, RestaurantId: @Model.CurrentRestaurant.Id })
                    }).then(() => {
                        let rat = document.getElementsByClassName("rating")[0]
                        rat.removeChild(document.getElementsByClassName("rating_part")[0]);
                        let p = document.createElement("p");
                        let pText = document.createTextNode("Thank you for rating!");
                        p.appendChild(pText);
                        rat.append(p);
                    })
            })
        }
        let modal = document.getElementById("myModal");
        let confirm = document.getElementById("confirm");
        confirm.addEventListener("click", () => {
            let backdrop = document.getElementsByClassName("modal-backdrop")[0];
            let curReview = confirm.getAttribute("name");
            fetch("/Reviews/DeleteReview/" + curReview, {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(curReview)
            }).then(o => o.text()).then(() => { destination.removeChild(document.getElementById(curReview)) })
            document.body.removeChild(backdrop);
        })
        let modalEmail = document.getElementById("modal-email")

            sendEmail.addEventListener("click", () => {
            let modalCheck = 0;
            let phoneDiv = modalEmail.getElementsByClassName("telephone")[0];
            let peepDiv = modalEmail.getElementsByClassName("people")[0];
           let phoneRegEx = /^(07)[1,5,7,0]\d{6}$/;
            let phoneN = document.getElementById("email_phoneNumber").value;
            if (phoneN == "") {
                if (!document.getElementById("req")) {
                    let s = document.createElement("p");
                    s.setAttribute("id", "req");
                    let sText = document.createTextNode("Telephone number is required.");
                    s.appendChild(sText);
                    modalEmail.insertBefore(s, phoneDiv)
                }
                if (document.getElementById("regex")) {
                    document.getElementById("regex").parentNode.removeChild(document.getElementById("regex"));
                    }
            }
            else if (!phoneRegEx.test(phoneN)) {
                if (!document.getElementById("regex")) {
                    let s = document.createElement("p");
                    s.setAttribute("id", "regex")
                    let sText = document.createTextNode("Please enter a valid telephone number.");

                    s.appendChild(sText);
                    modalEmail.insertBefore(s, phoneDiv);
                }
                    if (document.getElementById("req")) {
                    document.getElementById("req").parentNode.removeChild(document.getElementById("req"));
                }
            }
            else {
                modalCheck += 1;
            }

            let peopleN = document.getElementById("email_people").value;
            if (peopleN > 0) {
                if (document.getElementById("peeps")) {
                    document.getElementById("peeps").parentNode.removeChild(document.getElementById("peeps"));
                }
                modalCheck += 1;
            } else {
                if (!document.getElementById("peeps")) {
                    let s = document.createElement("p");
                    s.setAttribute("id", "peeps")
                    let sText = document.createTextNode("Please enter more than 1 person.");
                    s.appendChild(sText);
                    modalEmail.insertBefore(s, peepDiv);
                }
            }
            if (modalCheck == 2) {
                $(document).ready(function () {
                    toastr["success"]("Message sent!");
                   
                });
                let hour = hours.value;
                fetch("/Restaurants/makeReservation/", {
                    method: "POST",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type' : 'application/json'
                    },
                    body: JSON.stringify({ PhoneNumber: phoneN, People: peopleN, RestaurantId: @Model.CurrentRestaurant.Id, Hour: hour })
                })
                sendEmail.setAttribute("data-dismiss", "modal");
            }
        })
    }
    function deleteButtons(btns) {
                let modal = document.getElementById("myModal");
                let confirm = document.getElementById("confirm");
                if (btns.length > 0) {
                    for (let i = 0; i < btns.length; i++) {
                        let button = btns[i];
                        button.addEventListener("click", () => {
                            modal.setAttribute("aria-hidden", "true");
                            let curReview = button.getAttribute("name");
                            confirm.setAttribute("name", curReview);
                        }
                        )

                    }
        }
        }


    </script>
}
<style>

    .rating img {
        display: inline;
    }

        .rating img:hover {
            cursor: pointer;
        }

    #comments {
        font-size: 33px;
        margin: 20px;
    }

    .hr {
        color: #555;
        width: 50%;
        border: 1px solid;
    }
.box {
    max-width: 50%;
    text-align: initial;
    margin: 7px auto;
    background: #e7ecff;
    padding: 10px;
    -webkit-box-shadow: 4px 4px 14px -1px rgba(0,0,0,0.75);
    -moz-box-shadow: 4px 4px 14px -1px rgba(0,0,0,0.75);
    box-shadow: 4px 4px 14px -1px rgba(0,0,0,0.75);
}
    #reviews {
        text-align:center;
    }
    .removable{
        float:right;
    }

    .body-content {
        padding-right: 56px;
    }
    .carousel-inner > .item > img {
  margin: 0 auto;
  height:200px;
}
    .container-fluid{
        margin:30px;
    }
</style>
